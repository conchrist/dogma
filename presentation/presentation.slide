Go Chat
A chat written in Go and JavaScript using Websockets
1 May 2014
Tags: chat,Go,websocket

Christopher Lillthors, Viktor Kronvall

lillt@kth.se
vkr@kth.se

http://github.com/christopherL91
http://github.com/considerate

The gopher images are Creative Commons Attributions 3.0 licensed and they are created by Renee French.

* Programbeskrivning

- Krav:
	Databas: MongoDB

Programmet är tänkt att utgöra ett komplett internt chattsystem för ett företag.

I programvaran skapar man användare via ett enkelt gränssnitt, och när man väl är inloggad kommer man till en vy där det finns möjlighet att skriva textmeddelanden till alla som är inloggade. Alla meddelanden som hittils har skrivits sparas in i ovan nämnd databas.

Programvaran består av två delar. Dels en server som är helt skriven i Go, och dels en client som är skriven i HTML/JavaScript tillsammans med ramverket polymer.
Klienten är dessutom helt mobilanpassad och är således responsiv.

.image frontpage.png

* Användarbeskrivning
Vi har inte utgått från en speciell typ av målgrupp, men programvaran är väldigt enkel och intuitiv att använda sig av. Vi skulle uppskatta att en normal datoranvändare utan problem kan använda vår programvara.

* Användarscenarier

- Scenario 1 - Ny människa på jobbet:

En person på företaget är nyanställd och har fått i uppgift av sin chef att bekanta sig med det nya interna kommunikationssystemet.
Personen möts av följande gränssnitt:

.link https://github.com/conchrist/dogma/blob/master/1.png Huvudmeny

För att komma vidare och skapa en ny användare, trycker användaren på knappen med texten "New user" som i sin tur leder till följande vy:

.link https://github.com/conchrist/dogma/blob/master/3.png Ny användare

Här skriven användaren in ett valt användarnamn och ett lösenord och trycker på knappen "Create user" för att komma vidare till chattsidan.

.link https://github.com/conchrist/dogma/blob/master/2.png Chatt

 ... fortsättning ->

* Användarscenarier

Här kan nu användaren skriva meddelanden och kommunicera med alla som för tillfället är inloggade i systemet. För att logga ut stänger man ner fönstret.

.image gopherhat.jpg 400 300

* Användarscenarier

- Scenario 2 - Chatt med chefen:

.link https://github.com/conchrist/dogma/blob/master/Presentation/2.png Chatt

En anställd på företaget behöver prata med sin chef som sitter någonstans i det ofantligt stora företagskomplexet. Den anställde har fått sin grundkurs i hur man använder företagets interna kommunikationssystem och vänder sig därför till sin dator. Väl vid datorn skriver den anställde snabbt iväg ett meddelande och trycker "Send". Det dröjer inte länge förrän chefen svarar och ger ett snabbt besked. Allt tack var det nya snabba kommunikationssystemet.

* Testplan

Vi behöver lägga ner mer tid på testning och utformandet av gränssnittet. Det finns buggar som vi är mycker väl medvetna om och som vi kommer ha färdiga innan deadline. Det är framförallt storleken och användarupplevelsen i varje vy som vi kommer lägga fokus på, men även att lägga till lite nya features. Som ni såg i ovan presentation av scenarion så har vi kommit långt i själva utvecklandet av det visuella, men det finns alltid små detaljer som man kan rätta till.
Vi kommer att försöka få människor i vår omgivning att ge feedback angående vår design vilket kommer utveckla vår programvara till det bättre.

.image gophers.jpg 300 400

* Programdesign
Inloggnings-proceduren

.code ../SocketServer/handler.go /START OMIT/,/END OMIT/

* Programdesign
Programmet visar vilka användare som för tillfället är inloggade.

.code ../SocketServer/serverclient.go /START OMIT/,/END OMIT/

* Programdesign
Front-end koden är modulariserad med Web Components och Polymer.

.code ../public/components/chat-page/chat-page.html  /\<core-pages/,/\<\/core-pages/

* Programdesign
Klienten kopplar upp sig mot servern med WebSockets och skickar meddelanden som JSON.

.code ../public/components/chat-room/chat-room.js /START OMIT/,/END OMIT/
.code ../public/components/chat-room/chat-room.js /START SEND OMIT/,/END SEND OMIT/

* Tekniska frågor

-   Q: Hur implementerar vi en lista över alla inloggade användare?
	A: Se kodimplementation som vi visat tidigare. Clienten måste dock skicka
	en speciellt JSON-meddelande för att få del av listan.

-   Q: Fråga Foo
	A: Bar

-   Q: Fråga Foo
	A: Bar

-   Q: Fråga Foo
	A: Bar

* Smakprov

Låt oss visa detta i produktion. Be till demo-gudarna!

.play ../dogma.go /START OMIT/,/END OMIT/

.link https://unicorn.considerate.se:4443 klient

.image frontpage.png 

* Sammanfattning
Projektet var till stor del klart innan den schemalagda tiden. Vi har dock arbetat med att förfina
många delar av projektet den senare tiden.Det har gått förhållandevis bra och det var ett intressant projekt att arbeta med. 

Just detta projekt är inte så troligt att vi kommer jobba vidare med i framtiden det var däremot lärorikt och vi har kunnat ta till oss av kunskap om många olika delar i att skriva ett program i projektstruktur som denna. Dessa lärdomar tar vi gärna med oss till framtida projekt.

Vi har hållt oss ganska mycket till den (informella) plan vi skapade vid projektets början och lite har ändrats sedan dess.

* Nämnvärda Programvaror
- github.com/codegangsta/martini
- code.google.com/p/gcfg
- labix.org/v2/mgo
- polymer-project.org
- github.com/smartystreets/goconvey/convey
